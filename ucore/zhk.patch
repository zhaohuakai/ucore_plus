diff --git a/autobuild.sh b/autobuild.sh
old mode 100755
new mode 100644
diff --git a/autotest.sh b/autotest.sh
old mode 100755
new mode 100644
diff --git a/ucore/ChangeLog b/ucore/ChangeLog
old mode 100644
new mode 100755
diff --git a/ucore/Makefile b/ucore/Makefile
old mode 100644
new mode 100755
index 70d8a38..4c6d811
--- a/ucore/Makefile
+++ b/ucore/Makefile
@@ -19,7 +19,8 @@ CONFIG = package/config
 CONFIG_SCRIPT = $(OBJPATH_ROOT)/.config
 DEFCONFIG_SCRIPT = $(OBJPATH_ROOT)/.defconfig
 export KCONFIG_CONFIG=$(CONFIG_SCRIPT)
-CONFIG_DIR := $(OBJPATH_ROOT)/config
+#CONFIG_DIR := $(OBJPATH_ROOT)/config
+CONFIG_DIR := $(TOPDIR)/config
 KCONFIG_AUTOCONFIG=$(CONFIG_DIR)/auto.conf
 KCONFIG_AUTOHEADER=$(CONFIG_DIR)/autoconf.h
 CONFIG_CONFIG_IN = $(KTREE)/arch/$(ARCH)/Kconfig
@@ -36,7 +37,7 @@ MAKEFLAGS += -rR --no-print-directory
 #### CROSS COMPILE HERE ####
 ARCH ?= $(patsubst "%",%,$(UCONFIG_ARCH))
 BOARD ?= default
-CROSS_COMPILE ?= $(UCONFIG_CROSS_COMPILE)
+CROSS_COMPILE ?= ~/tools/arm-eabi-4.4.3/bin/arm-eabi-
 
 export CONFIG_SHELL quiet Q KBUILD_VERBOSE
 export ARCH CROSS_COMPILE
@@ -78,7 +79,7 @@ HOSTCXX:=$(shell $(CONFIG_SHELL) -c "which $(HOSTCXX)" || type -p $(HOSTCXX) ||
 HOSTLD:=$(shell $(CONFIG_SHELL) -c "which $(HOSTLD)" || type -p $(HOSTLD) || echo ld)
 HOSTLN:=$(shell $(CONFIG_SHELL) -c "which $(HOSTLN)" || type -p $(HOSTLN) || echo ln)
 ifndef CFLAGS_FOR_BUILD
-CFLAGS_FOR_BUILD:=-g -O2
+CFLAGS_FOR_BUILD:=-g -O0
 endif
 export HOSTAR HOSTAS HOSTCC HOSTCXX HOSTLD
 
@@ -168,7 +169,7 @@ swapimg: $(SWAPFS_FILE)
 
 $(SWAPFS_FILE): | $(OBJPATH_ROOT)
 	@echo Making $@
-	$(Q)dd if=/dev/zero of=$@ bs=1M count=128
+	$(Q)dd if=/dev/zero of=$@ bs=1M count=512
 endif
 
 $(OBJPATH_ROOT):
diff --git a/ucore/TODO b/ucore/TODO
old mode 100644
new mode 100755
diff --git a/ucore/gdbinit.arm b/ucore/gdbinit.arm
old mode 100644
new mode 100755
index edf8cf2..9dd75ca
--- a/ucore/gdbinit.arm
+++ b/ucore/gdbinit.arm
@@ -5,14 +5,16 @@ x/2i $pc
 end
 
 target remote 127.0.0.1:1234
-#add-symbol-file android_test/system/bin/linker 0x6fee6180
-#add-symbol-file android_test/system/lib/libc.so 0x6fe765e0
+add-symbol-file src/user-ucore/_initial/system/bin/dexopt  0x6fee0ab4
+add-symbol-file src/user-ucore/_initial/system/bin/linker  0x6fee3180
+add-symbol-file src/user-ucore/_initial/system/lib/libm.so 0x6fecae38
+add-symbol-file src/user-ucore/_initial/system/lib/libc.so 0x6fe5c5e0
+#add-symbol-file src/user-ucore/_initial/system/bin/dalvikvm
 #add-symbol-file android_test/ta 0x30800560
 #b bionic/linker/linker.cpp:1925
 #b call_array
-
-#b load_library
-
+b load_icode
+b do_execve
 #file obj/user-sfs/tt
 #file obj/user-sfs/bin/sigtest1
 #b main
diff --git a/ucore/gdbinit.i386 b/ucore/gdbinit.i386
old mode 100644
new mode 100755
diff --git a/ucore/gdbinit.um b/ucore/gdbinit.um
old mode 100644
new mode 100755
diff --git a/ucore/gdbinit.x86_64 b/ucore/gdbinit.x86_64
old mode 100644
new mode 100755
diff --git a/ucore/misc/Lindent b/ucore/misc/Lindent
old mode 100755
new mode 100644
diff --git a/ucore/misc/mkimage b/ucore/misc/mkimage
old mode 100755
new mode 100644
diff --git a/ucore/misc/rootfs/bin/cat b/ucore/misc/rootfs/bin/cat
old mode 100755
new mode 100644
diff --git a/ucore/misc/rootfs/bin/sh b/ucore/misc/rootfs/bin/sh
old mode 100755
new mode 100644
diff --git a/ucore/misc/tools-mksfs b/ucore/misc/tools-mksfs
old mode 100755
new mode 100644
diff --git a/ucore/mk/arch-nios2.mk b/ucore/mk/arch-nios2.mk
old mode 100755
new mode 100644
diff --git a/ucore/mk/config-nios2.mk b/ucore/mk/config-nios2.mk
old mode 100755
new mode 100644
diff --git a/ucore/package/config/Makefile b/ucore/package/config/Makefile
old mode 100644
new mode 100755
diff --git a/ucore/package/config/Makefile.kconfig b/ucore/package/config/Makefile.kconfig
old mode 100644
new mode 100755
diff --git a/ucore/package/config/POTFILES.in b/ucore/package/config/POTFILES.in
old mode 100644
new mode 100755
diff --git a/ucore/package/config/conf.c b/ucore/package/config/conf.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/confdata.c b/ucore/package/config/confdata.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/expr.c b/ucore/package/config/expr.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/expr.h b/ucore/package/config/expr.h
old mode 100644
new mode 100755
diff --git a/ucore/package/config/foo.h b/ucore/package/config/foo.h
old mode 100644
new mode 100755
diff --git a/ucore/package/config/gconf.c b/ucore/package/config/gconf.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/gconf.glade b/ucore/package/config/gconf.glade
old mode 100644
new mode 100755
diff --git a/ucore/package/config/images.c b/ucore/package/config/images.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/kconfig_load.c b/ucore/package/config/kconfig_load.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/kxgettext.c b/ucore/package/config/kxgettext.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/lex.zconf.c b/ucore/package/config/lex.zconf.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/lex.zconf.c_shipped b/ucore/package/config/lex.zconf.c_shipped
old mode 100644
new mode 100755
diff --git a/ucore/package/config/lkc.h b/ucore/package/config/lkc.h
old mode 100644
new mode 100755
diff --git a/ucore/package/config/lkc_proto.h b/ucore/package/config/lkc_proto.h
old mode 100644
new mode 100755
diff --git a/ucore/package/config/lxdialog/check-lxdialog.sh b/ucore/package/config/lxdialog/check-lxdialog.sh
old mode 100755
new mode 100644
diff --git a/ucore/package/config/mconf.c b/ucore/package/config/mconf.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/menu.c b/ucore/package/config/menu.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/qconf.cc b/ucore/package/config/qconf.cc
old mode 100644
new mode 100755
diff --git a/ucore/package/config/qconf.h b/ucore/package/config/qconf.h
old mode 100644
new mode 100755
diff --git a/ucore/package/config/symbol.c b/ucore/package/config/symbol.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/util.c b/ucore/package/config/util.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.gperf b/ucore/package/config/zconf.gperf
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.hash.c b/ucore/package/config/zconf.hash.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.hash.c_shipped b/ucore/package/config/zconf.hash.c_shipped
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.l b/ucore/package/config/zconf.l
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.tab.c b/ucore/package/config/zconf.tab.c
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.tab.c_shipped b/ucore/package/config/zconf.tab.c_shipped
old mode 100644
new mode 100755
diff --git a/ucore/package/config/zconf.y b/ucore/package/config/zconf.y
old mode 100644
new mode 100755
diff --git a/ucore/src/bootloader/arch/nios2/boot_loader_cfi.srec b/ucore/src/bootloader/arch/nios2/boot_loader_cfi.srec
old mode 100755
new mode 100644
diff --git a/ucore/src/bootloader/arch/or32/or32/spr_defs.h b/ucore/src/bootloader/arch/or32/or32/spr_defs.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/arm/syscall/syscall.c b/ucore/src/kern-ucore/arch/arm/syscall/syscall.c
index e62dd5f..00ec25a 100644
--- a/ucore/src/kern-ucore/arch/arm/syscall/syscall.c
+++ b/ucore/src/kern-ucore/arch/arm/syscall/syscall.c
@@ -19,12 +19,14 @@
 
 static uint32_t sys_exit(uint32_t arg[])
 {
+	//kprintf("[syscall sys_exit]\n");
 	int error_code = (int)arg[0];
 	return do_exit(error_code);
 }
 
 static uint32_t sys_fork(uint32_t arg[])
 {
+	//kprintf("[syscall sys_fork]\n");
 	struct trapframe *tf = pls_read(current)->tf;
 	uintptr_t stack = tf->tf_esp;
 	return do_fork(0, stack, tf);
@@ -32,6 +34,7 @@ static uint32_t sys_fork(uint32_t arg[])
 
 static uint32_t sys_wait(uint32_t arg[])
 {
+	kprintf("[syscall sys_wait]\n");
 	int pid = (int)arg[0];
 	int *store = (int *)arg[1];
 	return do_wait(pid, store);
@@ -39,14 +42,33 @@ static uint32_t sys_wait(uint32_t arg[])
 
 static uint32_t sys_execve(uint32_t arg[])
 {
+	//kprintf("[syscall sys_execve]\n");
 	const char *name = (const char *)arg[0];
 	const char **argv = (const char **)arg[1];
+	
+	//int t = 0;
+	//kprintf("t addr=%x\n", &t);
+	/*if(argv == NULL){
+		argv = (const char **)0x6fffbf10;
+		argv[0] = (const char *)arg[0];		
+		argv[1] = NULL;
+		
+	}*/
+	/*
+	kprintf("argv = %x\n", argv);
+	kprintf("argv addr=%x\n", &argv);
+	kprintf("arg addr=%x\n", &arg);
+	kprintf("arg[0] addr=%x\n", &arg[0]);
+	kprintf("arg[1] addr=%x\n", &arg[1]);
+	kprintf("argv[0] addr=%x\n", &argv[0]);
+	*/
 	const char **envp = (const char **)arg[2];
 	return do_execve(name, argv, envp);
 }
 
 static uint32_t sys_clone(uint32_t arg[])
 {
+	kprintf("[syscall sys_clone]\n");
 	struct trapframe *tf = pls_read(current)->tf;
 	uint32_t clone_flags = (uint32_t) arg[0];
 	uintptr_t stack = (uintptr_t) arg[1];
@@ -58,23 +80,27 @@ static uint32_t sys_clone(uint32_t arg[])
 
 static uint32_t sys_exit_thread(uint32_t arg[])
 {
+	kprintf("[syscall sys_exit_thread]\n");
 	int error_code = (int)arg[0];
 	return do_exit_thread(error_code);
 }
 
 static uint32_t sys_yield(uint32_t arg[])
 {
+	kprintf("[syscall sys_yield]\n");
 	return do_yield();
 }
 
 static uint32_t sys_kill(uint32_t arg[])
 {
+	kprintf("[syscall sys_kill]\n");
 	int pid = (int)arg[0];
 	return do_kill(pid, -E_KILLED);
 }
 
 static uint32_t sys_getpid(uint32_t arg[])
 {
+	kprintf("[syscall sys_getpid]\n");
 	return pls_read(current)->pid;
 }
 
@@ -91,6 +117,7 @@ static uint32_t sys_gettime(uint32_t arg[])
 
 static uint32_t sys_putc(uint32_t arg[])
 {
+	kprintf("[syscall sys_putc]\n");
 	int c = (int)arg[0];
 	kcons_putc(c);
 	return 0;
@@ -104,12 +131,14 @@ static uint32_t sys_pgdir(uint32_t arg[])
 
 static uint32_t sys_brk(uint32_t arg[])
 {
+	//kprintf("[syscall sys_brk]\n");
 	uintptr_t *brk_store = (uintptr_t *) arg[0];
 	return do_brk(brk_store);
 }
 
 static uint32_t sys_mmap(uint32_t arg[])
 {
+	kprintf("[syscall sys_mmap]\n");
 	uintptr_t *addr_store = (uintptr_t *) arg[0];
 	size_t len = (size_t) arg[1];
 	uint32_t mmap_flags = (uint32_t) arg[2];
@@ -118,6 +147,7 @@ static uint32_t sys_mmap(uint32_t arg[])
 
 static uint32_t sys_munmap(uint32_t arg[])
 {
+	kprintf("[syscall sys_munmap]\n");
 	uintptr_t addr = (uintptr_t) arg[0];
 	size_t len = (size_t) arg[1];
 	return do_munmap(addr, len);
@@ -125,6 +155,7 @@ static uint32_t sys_munmap(uint32_t arg[])
 
 static uint32_t sys_shmem(uint32_t arg[])
 {
+	kprintf("[syscall sys_shmem]\n");
 	uintptr_t *addr_store = (uintptr_t *) arg[0];
 	size_t len = (size_t) arg[1];
 	uint32_t mmap_flags = (uint32_t) arg[2];
@@ -216,6 +247,7 @@ static uint32_t sys_mbox_info(uint32_t arg[])
 
 static uint32_t sys_open(uint32_t arg[])
 {
+	//kprintf("[syscall sys_open]\n");
 	const char *path = (const char *)arg[0];
 	uint32_t open_flags = (uint32_t) arg[1];
 	return sysfile_open(path, open_flags);
@@ -223,12 +255,14 @@ static uint32_t sys_open(uint32_t arg[])
 
 static uint32_t sys_close(uint32_t arg[])
 {
+	//kprintf("[syscall sys_close]\n");
 	int fd = (int)arg[0];
 	return sysfile_close(fd);
 }
 
 static uint32_t sys_read(uint32_t arg[])
 {
+	//kprintf("[syscall sys_read]\n");
 	int fd = (int)arg[0];
 	void *base = (void *)arg[1];
 	size_t len = (size_t) arg[2];
@@ -237,6 +271,7 @@ static uint32_t sys_read(uint32_t arg[])
 
 static uint32_t sys_write(uint32_t arg[])
 {
+	//kprintf("[syscall sys_write]\n");
 	int fd = (int)arg[0];
 	void *base = (void *)arg[1];
 	size_t len = (size_t) arg[2];
@@ -245,6 +280,7 @@ static uint32_t sys_write(uint32_t arg[])
 
 static uint32_t sys_seek(uint32_t arg[])
 {
+	kprintf("[syscall sys_seek]\n");
 	int fd = (int)arg[0];
 	off_t pos = (off_t) arg[1];
 	int whence = (int)arg[2];
@@ -255,6 +291,7 @@ static uint32_t sys_seek(uint32_t arg[])
 
 static uint32_t sys_fstat(uint32_t arg[])
 {
+	//kprintf("[syscall sys_fstat]\n");
 	int fd = (int)arg[0];
 	struct stat *stat = (struct stat *)arg[1];
 	return sysfile_fstat(fd, stat);
@@ -262,18 +299,21 @@ static uint32_t sys_fstat(uint32_t arg[])
 
 static uint32_t sys_fsync(uint32_t arg[])
 {
+	kprintf("[syscall sys_fsync]\n");
 	int fd = (int)arg[0];
 	return sysfile_fsync(fd);
 }
 
 static uint32_t sys_chdir(uint32_t arg[])
 {
+	kprintf("[syscall sys_chdir]\n");
 	const char *path = (const char *)arg[0];
 	return sysfile_chdir(path);
 }
 
 static uint32_t sys_getcwd(uint32_t arg[])
 {
+	kprintf("[syscall sys_getcwd]\n");
 	char *buf = (char *)arg[0];
 	size_t len = (size_t) arg[1];
 	return sysfile_getcwd(buf, len);
@@ -281,12 +321,14 @@ static uint32_t sys_getcwd(uint32_t arg[])
 
 static uint32_t sys_mkdir(uint32_t arg[])
 {
+	kprintf("[syscall sys_mkdir]\n");
 	const char *path = (const char *)arg[0];
 	return sysfile_mkdir(path);
 }
 
 static uint32_t sys_link(uint32_t arg[])
 {
+	kprintf("[syscall sys_link]\n");
 	const char *path1 = (const char *)arg[0];
 	const char *path2 = (const char *)arg[1];
 	return sysfile_link(path1, path2);
@@ -294,6 +336,7 @@ static uint32_t sys_link(uint32_t arg[])
 
 static uint32_t sys_rename(uint32_t arg[])
 {
+	kprintf("[syscall sys_rename]\n");
 	const char *path1 = (const char *)arg[0];
 	const char *path2 = (const char *)arg[1];
 	return sysfile_rename(path1, path2);
@@ -301,12 +344,14 @@ static uint32_t sys_rename(uint32_t arg[])
 
 static uint32_t sys_unlink(uint32_t arg[])
 {
+	kprintf("[syscall sys_unlink]\n");
 	const char *name = (const char *)arg[0];
 	return sysfile_unlink(name);
 }
 
 static uint32_t sys_getdirentry(uint32_t arg[])
 {
+	//kprintf("[syscall sys_getdirentry]\n");
 	int fd = (int)arg[0];
 	struct dirent *direntp = (struct dirent *)arg[1];
 	return sysfile_getdirentry(fd, direntp, NULL);
@@ -314,6 +359,7 @@ static uint32_t sys_getdirentry(uint32_t arg[])
 
 static uint32_t sys_dup(uint32_t arg[])
 {
+	kprintf("[syscall sys_dup]\n");
 	int fd1 = (int)arg[0];
 	int fd2 = (int)arg[1];
 	return sysfile_dup(fd1, fd2);
@@ -321,12 +367,14 @@ static uint32_t sys_dup(uint32_t arg[])
 
 static uint32_t sys_pipe(uint32_t arg[])
 {
+	kprintf("[syscall sys_pipe]\n");
 	int *fd_store = (int *)arg[0];
 	return sysfile_pipe(fd_store);
 }
 
 static uint32_t sys_mkfifo(uint32_t arg[])
 {
+	kprintf("[syscall sys_mkfifo]\n");
 	const char *name = (const char *)arg[0];
 	uint32_t open_flags = (uint32_t) arg[1];
 	return sysfile_mkfifo(name, open_flags);
@@ -334,6 +382,7 @@ static uint32_t sys_mkfifo(uint32_t arg[])
 
 static uint32_t sys_ioctl(uint32_t arg[])
 {
+	kprintf("[syscall sys_ioctl]\n");
 	int fd = (int)arg[0];
 	unsigned int cmd = arg[1];
 	unsigned long data = (unsigned long)arg[2];
@@ -342,6 +391,7 @@ static uint32_t sys_ioctl(uint32_t arg[])
 
 static uint32_t sys_init_module(uint32_t arg[])
 {
+	kprintf("[syscall sys_init_module]\n");
 	void __user *umod = (void __user *)arg[0];
 	unsigned long len = (unsigned long)arg[1];
 	const char *urgs = (const char *)arg[2];
@@ -350,18 +400,21 @@ static uint32_t sys_init_module(uint32_t arg[])
 
 static uint32_t sys_cleanup_module(uint32_t arg[])
 {
+	kprintf("[syscall sys_cleanup_module]\n");
 	const char __user *name = (const char __user *)arg[0];
 	return do_cleanup_module(name);
 }
 
 static uint32_t sys_list_module(uint32_t arg[])
 {
+	kprintf("[syscall sys_list_module]\n");
 	print_modules();
 	return 0;
 }
 
 static uint32_t sys_mount(uint32_t arg[])
 {
+	kprintf("[syscall sys_mount]\n");
 	const char *source = (const char *)arg[0];
 	const char *target = (const char *)arg[1];
 	const char *filesystemtype = (const char *)arg[2];
@@ -371,12 +424,14 @@ static uint32_t sys_mount(uint32_t arg[])
 
 static uint32_t sys_umount(uint32_t arg[])
 {
+	kprintf("[syscall sys_umount]\n");
 	const char *target = (const char *)arg[0];
 	return do_umount(target);
 }
 
 static uint32_t sys_linux_mmap(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_mmap]\n");
 	void *addr = (void *)arg[0];
 	size_t len = arg[1];
 	int fd = (int)arg[2];
@@ -386,6 +441,7 @@ static uint32_t sys_linux_mmap(uint32_t arg[])
 
 static uint32_t sys_linux_sigaction(uint32_t arg[])
 {
+	//kprintf("[syscall sys_linux_sigaction]\n");
 	return do_sigaction((int)arg[0], (const struct sigaction *)arg[1],
 			    (struct sigaction *)arg[2]);
 }
@@ -395,6 +451,7 @@ static uint32_t sys_linux_sigaction(uint32_t arg[])
 
 static uint32_t sys_linux_sigprocmask(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigprocmask]\n");
 	return do_sigprocmask((int)arg[0], (const sigset_t *)arg[1],
 			      (sigset_t *) arg[2]);
 }
@@ -404,6 +461,7 @@ static uint32_t sys_linux_sigprocmask(uint32_t arg[])
 
 static uint32_t sys_linux_sigpending(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigpending]\n");
 	return do_sigpending((sigset_t *) arg[0]);
 }
 
@@ -412,6 +470,7 @@ static uint32_t sys_linux_sigpending(uint32_t arg[])
 
 static uint32_t sys_linux_sigtkill(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigtkill]\n");
 	return do_sigtkill((int)arg[0], (int)arg[1]);
 }
 
@@ -419,6 +478,7 @@ static uint32_t sys_linux_sigtkill(uint32_t arg[])
 
 static uint32_t sys_linux_sigsuspend(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigsuspend]\n");
 	return do_sigsuspend((sigset_t *) arg[0]);
 }
 
@@ -427,6 +487,7 @@ static uint32_t sys_linux_sigsuspend(uint32_t arg[])
 
 static uint32_t sys_linux_sigkill(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigkill]\n");
 	return do_sigkill((int)arg[0], (int)arg[1]);
 }
 
@@ -435,6 +496,7 @@ static uint32_t sys_linux_sigkill(uint32_t arg[])
 
 static uint32_t sys_linux_sigaltstack(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigaltstack]\n");
 	const stack_t *stack = (const stack_t *)arg[0];
 	stack_t *old = (stack_t *) arg[1];
 	return do_sigaltstack(stack, old);
@@ -444,6 +506,7 @@ static uint32_t sys_linux_sigaltstack(uint32_t arg[])
 
 static uint32_t sys_linux_sigwaitinfo(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigwaitinfo]\n");
 	const sigset_t *set = (const sigset_t *)arg[0];
 	struct siginfo_t *info = (struct siginfo_t *)arg[1];
 	return do_sigwaitinfo(set, info);
@@ -454,6 +517,7 @@ static uint32_t sys_linux_sigwaitinfo(uint32_t arg[])
 //this never used by user program
 static uint32_t sys_linux_sigreturn(uint32_t arg[])
 {
+	kprintf("[syscall sys_linux_sigreturn]\n");
 	return do_sigreturn();
 }
 
@@ -464,6 +528,7 @@ static uint32_t sys_linux_sigreturn(uint32_t arg[])
 
 static uint32_t __sys_linux_ioctl(uint32_t args[])
 {
+	//kprintf("[syscall __sys_linux_ioctl]\n");
 	int fd = (int)args[0];
 	//FIXME
 	if (fd < 3)
@@ -475,6 +540,7 @@ static uint32_t __sys_linux_ioctl(uint32_t args[])
 
 static uint32_t __sys_linux_mmap2(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_mmap2]\n");
 	//TODO
 	void *addr = (void *)arg[0];
 	size_t len = arg[1];
@@ -513,19 +579,22 @@ static uint32_t __sys_linux_mmap2(uint32_t arg[])
 
 static uint32_t __sys_linux_dup(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_dup]\n");
 	int fd = (int)arg[0];
 	return sysfile_dup(fd, NO_FD);
 }
 
 static uint32_t __sys_linux_fcntl(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_fcntl]\n");
 	return -E_INVAL;
 }
 
 #ifdef UCONFIG_BIONIC_LIBC
 static uint32_t __sys_linux_mprotect(uint32_t arg[])
 {
-
+	
+	//kprintf("[syscall __sys_linux_mprotect]\n");
 	void *addr = (void *)arg[0];
 	size_t len = arg[1];
 	int prot = arg[2];
@@ -538,12 +607,14 @@ static uint32_t __sys_linux_mprotect(uint32_t arg[])
 
 static uint32_t __sys_linux_brk(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_brk]\n");
 	uintptr_t brk = (uintptr_t) arg[0];
 	return do_linux_brk(brk);
 }
 
 static uint32_t __sys_linux_getdents(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_getdents]\n");
 	int fd = (int)arg[0];
 	struct dirent *dir = (struct dirent *)arg[1];
 	uint32_t count = arg[2];
@@ -557,6 +628,7 @@ static uint32_t __sys_linux_getdents(uint32_t arg[])
 
 static uint32_t __sys_linux_stat(uint32_t args[])
 {
+	kprintf("[syscall __sys_linux_stat]\n");
 	char *fn = (char *)args[0];
 	struct linux_stat *st = (struct linux_stat *)args[1];
 	//kprintf("TODO __sys_linux_stat, %s %d\n", fn, sizeof(struct linux_stat));
@@ -565,6 +637,7 @@ static uint32_t __sys_linux_stat(uint32_t args[])
 
 static uint32_t __sys_linux_fstat(uint32_t args[])
 {
+	kprintf("[syscall __sys_linux_fstat]\n");
 	int fd = (int)args[0];
 	struct linux_stat *st = (struct linux_stat *)args[1];
 	//kprintf("TODO __sys_linux_fstat, %d %d\n", fd, sizeof(struct linux_stat));
@@ -573,6 +646,7 @@ static uint32_t __sys_linux_fstat(uint32_t args[])
 
 static uint32_t __sys_linux_waitpid(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_waitpid]\n");
 	int pid = (int)arg[0];
 	int *store = (int *)arg[1];
 	int options = (int)arg[2];
@@ -586,11 +660,13 @@ static uint32_t __sys_linux_waitpid(uint32_t arg[])
 
 static uint32_t __sys_linux_sched_yield(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_sched_yield]\n");
 	return do_yield();
 }
 
 static uint32_t __sys_linux_ugetrlimit(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_ugetrlimit]\n");
 	int res = (int)arg[0];
 	struct linux_rlimit *lim = (struct linux_rlimit *)arg[1];
 	return do_linux_ugetrlimit(res, lim);
@@ -606,6 +682,7 @@ static uint32_t __sys_linux_ugetrlimit(uint32_t arg[])
  */
 static uint32_t __sys_linux_clone(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_clone]\n");
 	struct trapframe *tf = pls_read(current)->tf;
 	uint32_t clone_flags = (uint32_t) arg[0];
 	uintptr_t stack = (uintptr_t) arg[1];
@@ -617,12 +694,14 @@ static uint32_t __sys_linux_clone(uint32_t arg[])
 
 static uint32_t __sys_linux_pipe(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_pipe]\n");
 	int *fd_store = (int *)arg[0];
 	return sysfile_pipe(fd_store) ? -1 : 0;
 }
 
 static uint32_t __sys_linux_getppid(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_getppid]\n");
 	struct proc_struct *parent = pls_read(current)->parent;
 	if (!parent)
 		return 0;
@@ -637,6 +716,7 @@ struct linux_pollfd {
 
 static uint32_t __sys_linux_poll(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_poll]\n");
 	//FIXME
 	struct linux_pollfd *fd = (struct linux_pollfd *)arg[0];
 	int nfds = (int)arg[1];
@@ -647,18 +727,21 @@ static uint32_t __sys_linux_poll(uint32_t arg[])
 
 static uint32_t __sys_linux_exit(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_exit]\n");
 	int error_code = (int)arg[0];
 	return do_exit_thread(error_code);
 }
 
 static uint32_t __sys_linux_exit_group(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_exit_group]\n");
 	int error_code = (int)arg[0];
 	return do_exit(error_code);
 }
 
 static uint32_t __sys_linux_nanosleep(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_nanosleep]\n");
 	//TODO: handle signal interrupt
 	struct linux_timespec *req = (struct linux_timespec *)arg[0];
 	struct linux_timespec *rem = (struct linux_timespec *)arg[1];
@@ -668,6 +751,7 @@ static uint32_t __sys_linux_nanosleep(uint32_t arg[])
 /* always root */
 static uint32_t __sys_linux_getuid(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_getuid]\n");
 	return 0;
 }
 
@@ -677,6 +761,7 @@ static uint32_t __sys_linux_getuid(uint32_t arg[])
 
 static uint32_t __sys_linux_getgid(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_getgid]\n");
 	return 0;
 }
 
@@ -687,6 +772,7 @@ static uint32_t __sys_linux_getgid(uint32_t arg[])
 #include <linux_misc_struct.h>
 static uint32_t __sys_linux_gettimeofday(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_gettimeofday]\n");
 	struct linux_timeval *tv = (struct linux_timeval *)arg[0];
 	struct linux_timezone *tz = (struct linux_timezone *)arg[1];
 	return ucore_gettimeofday(tv, tz);
@@ -695,17 +781,20 @@ static uint32_t __sys_linux_gettimeofday(uint32_t arg[])
 #ifdef UCONFIG_BIONIC_LIBC
 static uint32_t __sys_linux_gettid(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_gettid]\n");
 	return pls_read(current)->tid;
 }
 
 static uint32_t __sys_arm_linux_set_tls(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_arm_linux_set_tls]\n");
 	struct user_tls_desc *tlsp = (struct user_tls_desc *)arg[0];
 	return do_set_tls(tlsp);
 }
 
 static uint32_t __sys_linux_stat64(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_stat64]\n");
 	char *path = (char *)arg[0];
 	struct linux_stat64 *filestat = arg[1];
 	return sysfile_linux_stat64(path, filestat);
@@ -713,6 +802,7 @@ static uint32_t __sys_linux_stat64(uint32_t arg[])
 
 static uint32_t __sys_linux_madvise(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_madvise]\n");
 	void *addr = (void *)arg[0];
 	size_t len = arg[1];
 	int advice = arg[2];
@@ -721,6 +811,7 @@ static uint32_t __sys_linux_madvise(uint32_t arg[])
 
 static uint32_t __sys_linux_futex(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_futex]\n");
 	uintptr_t uaddr = (uintptr_t) arg[0];
 	int op = arg[1] & 127;
 	int val = arg[2];
@@ -729,12 +820,14 @@ static uint32_t __sys_linux_futex(uint32_t arg[])
 
 static uint32_t __sys_linux_clock_gettime(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_clock_gettime]\n");
 	struct linux_timespec *time = (struct linux_timespec *)arg[1];
 	return do_clock_gettime(time);
 }
 
 static uint32_t __sys_linux_fstat64(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_fstat64]\n");
 	int fd = (int)arg[0];
 	struct linux_stat64 *st = (struct linux_stat64 *)arg[1];
 	return sysfile_linux_fstat64(fd, st);
@@ -742,6 +835,7 @@ static uint32_t __sys_linux_fstat64(uint32_t arg[])
 
 static uint32_t __sys_linux_fcntl64(uint32_t arg[])
 {
+	//kprintf("[syscall __sys_linux_fcntl64]\n");
 	int fd = (int)arg[0];
 	int cmd = (int)arg[1];
 	int ctl_arg = (int)arg[2];
@@ -751,6 +845,7 @@ static uint32_t __sys_linux_fcntl64(uint32_t arg[])
 
 static uint32_t __sys_linux_access(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_access]\n");
 	char *path = (char *)arg[0];
 	int amode = (int)arg[1];
 	return linux_access(path, amode);
@@ -758,6 +853,7 @@ static uint32_t __sys_linux_access(uint32_t arg[])
 
 static uint32_t __sys_linux_writev(uint32_t arg[])
 {
+	kprintf("[syscall __sys_linux_writev]\n");
 	int fd = (int)arg[0];
 	struct iovec *iov = (struct iovec *)arg[1];
 	int iovcnt = (int)arg[2];
@@ -853,7 +949,8 @@ static uint32_t(*_linux_syscalls[]) (uint32_t arg[]) = {
 
 static int __sys_linux_entry(struct trapframe *tf)
 {
-	unsigned int num = tf->tf_regs.reg_r[7];
+	int num = tf->tf_regs.reg_r[7];
+	//int p = NUM_LINUX_SYSCALLS;
 	if (num < NUM_LINUX_SYSCALLS && _linux_syscalls[num]) {
 		uint32_t arg[6];
 		arg[0] = tf->tf_regs.reg_r[0];	// arg0
@@ -862,8 +959,167 @@ static int __sys_linux_entry(struct trapframe *tf)
 		arg[3] = tf->tf_regs.reg_r[3];	// arg3
 		arg[4] = tf->tf_regs.reg_r[4];	// arg3
 		arg[5] = tf->tf_regs.reg_r[5];	// arg3
+		
+		//kprintf("sizeof(_linux_syscalls)=%d\n",sizeof(_linux_syscalls));
+		//kprintf("sizeof(_linux_syscalls[0])=%d\n",sizeof(_linux_syscalls[0]));
+		//kprintf("p=%d\n",p);
+		/*
+		switch(num){			
+			case 1:
+				kprintf("[syscall no %d]\tsys_exit\n", num); 	break;
+			case 2:
+				kprintf("[syscall no %d]\tsys_fork\n", num); 	break;
+			case 3:
+				//kprintf("[syscall no %d]\tsys_read\n", num); 	break;
+				kprintf("[syscall no %d]\tread(%d, %d)\n", num, arg[0], arg[2]); 	break;
+			case 4:
+				kprintf("[syscall no %d]\tsys_write\n", num); break;
+			case 5:
+				//kprintf("[syscall no %d]\tsys_open path=%s\n", num, arg[0] ); break;
+				kprintf("[syscall no %d]\topen(%s)\n", num, arg[0]); break;
+			case 6:
+				//kprintf("[syscall no %d]\tsys_close\n", num); break;
+				kprintf("[syscall no %d]\tclose(%d)\n", num, arg[0]); break;
+			case 11:
+				kprintf("[syscall no %d]\tsys_execve\n", num); 
+				kprintf("addr arg[0] = %x\n", &arg[0]);
+				kprintf("addr arg[1] = %x\n", &arg[1]);
+				kprintf("addr arg[2] = %x\n", &arg[2]);
+				break;
+			case 19:
+				kprintf("[syscall no %d]\tsys_seek\n", num); break;
+			case 20:
+				kprintf("[syscall no %d]\tsys_getpid\n", num); break;
+			case 45:
+				kprintf("[syscall no %d]\t_sys_linux_brk\n", num); break;
+			case 54:
+				kprintf("[syscall no %d]\t__sys_linux_ioctl\n", num); break;
+			case 67:
+				//kprintf("[syscall no %d]\tsys_linux_sigaction\n", num); 
+				break;
+			case 91:
+				//kprintf("[syscall no %d]\tsys_munmap\n", num); break;
+				kprintf("[syscall no %d]\tmunmap(%x, %d, %d)\n", num, arg[0], arg[1], arg[2]); break;
+			case 125:
+				//kprintf("[syscall no %d]\t__sys_linux_mprotect\n", num); break;
+				kprintf("[syscall no %d]\tmprotect(%x, %d, %d)\n", num, arg[0], arg[1], arg[2]); break;
+			case 192:
+				//kprintf("[syscall no %d]\t__sys_linux_mmap2\n", num); break;
+				kprintf("[syscall no %d]\tmmap(%x, %d, %d, %d, %d)\n", num, arg[0], arg[1], arg[2], arg[3], arg[4]); break;
+			case 195:
+				kprintf("[syscall no %d]\t__sys_linux_stat64\n", num); break;
+			case 197:
+				//kprintf("[syscall no %d]\t__sys_linux_fstat64\n", num); break;
+				kprintf("[syscall no %d]\tfstat(%d)\n", num, arg[0]); break;
+			case 199: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getuid\n", num); break;
+			case 200: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getgid\n", num); break;
+			case 201: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getuid\n", num); break;
+			case 202: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getgid\n", num); break;
+			case 220:
+				//kprintf("[syscall no %d]\t__sys_linux_madvise\n", num); 
+				break;
+			case 221:				
+				kprintf("[syscall no %d]\t__sys_linux_fcntl64\n", num); break;
+			case 224:
+				kprintf("[syscall no %d]\t__sys_linux_gettid\n", num); break;
+			case 240:
+				kprintf("[syscall no %d]\t__sys_linux_futex\n", num); break;				
+			case 248:
+				kprintf("[syscall no %d]\t__sys_linux_exit_group\n", num); break;
+			case 263:
+				kprintf("[syscall no %d]\t__sys_linux_clock_gettime\n", num); break;
+			case 983045:				
+				kprintf("[syscall no %d]\t__sys_arm_linux_set_tls\n", num); break;
+			default:
+				//kprintf("");
+				kprintf("[syscall no %d]\t\n",num);
+		}
+		*/
 		tf->tf_regs.reg_r[0] = _linux_syscalls[num] (arg);	// calling the system call, return value in r0
+		/*
+		switch(num){			
+			case 1:
+				kprintf("[syscall no %d]\tsys_exit\n", num); 	break;
+			case 2:
+				kprintf("[syscall no %d]\tsys_fork\n", num); 	break;
+			case 3:
+				//kprintf("[syscall no %d]\tsys_read\n", num); 	break;
+				kprintf("[syscall no %d]\tread(%d, %d) = %d\n", num, arg[0], arg[2], tf->tf_regs.reg_r[0]); 	break;
+			case 4:
+				kprintf("[syscall no %d]\tsys_write\n", num); break;
+			case 5:
+				//kprintf("[syscall no %d]\tsys_open path=%s\n", num, arg[0] ); break;
+				kprintf("[syscall no %d]\topen(%s) = %d\n", num, arg[0], tf->tf_regs.reg_r[0]); break;
+			case 6:
+				//kprintf("[syscall no %d]\tsys_close\n", num); break;
+				kprintf("[syscall no %d]\tclose(%d) = %d\n", num, arg[0], tf->tf_regs.reg_r[0]); break;
+			case 11:
+				kprintf("[syscall no %d]\tsys_execve\n", num); 
+				kprintf("addr arg[0] = %x\n", &arg[0]);
+				kprintf("addr arg[1] = %x\n", &arg[1]);
+				kprintf("addr arg[2] = %x\n", &arg[2]);
+				break;
+			case 19:
+				kprintf("[syscall no %d]\tsys_seek\n", num); break;
+			case 20:
+				kprintf("[syscall no %d]\tsys_getpid\n", num); break;
+			case 45:
+				kprintf("[syscall no %d]\t_sys_linux_brk\n", num); break;
+			case 54:
+				kprintf("[syscall no %d]\t__sys_linux_ioctl\n", num); break;
+			case 67:
+				//kprintf("[syscall no %d]\tsys_linux_sigaction\n", num); 
+				break;
+			case 91:
+				//kprintf("[syscall no %d]\tsys_munmap\n", num); break;
+				kprintf("[syscall no %d]\tmunmap(%x, %d, %d) = %d\n", num, arg[0], arg[1], arg[2], tf->tf_regs.reg_r[0]); break;
+			case 125:
+				//kprintf("[syscall no %d]\t__sys_linux_mprotect\n", num); break;
+				kprintf("[syscall no %d]\tmprotect(%x, %d, %d) = %d\n", num, arg[0], arg[1], arg[2], tf->tf_regs.reg_r[0]); break;
+			case 192:
+				//kprintf("[syscall no %d]\t__sys_linux_mmap2\n", num); break;
+				kprintf("[syscall no %d]\tmmap(%x, %d, %d, %d, %d) = %x\n", num, arg[0], arg[1], arg[2], arg[3], arg[4], tf->tf_regs.reg_r[0]); break;
+			case 195:
+				kprintf("[syscall no %d]\t__sys_linux_stat64\n", num); break;
+			case 197:
+				//kprintf("[syscall no %d]\t__sys_linux_fstat64\n", num); break;
+				kprintf("[syscall no %d]\tfstat(%d) = %d\n", num, arg[0], tf->tf_regs.reg_r[0]); break;
+			case 199: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getuid\n", num); break;
+			case 200: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getgid\n", num); break;
+			case 201: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getuid\n", num); break;
+			case 202: // TODO
+				kprintf("[syscall no %d]\t__sys_linux_getgid\n", num); break;
+			case 220:
+				//kprintf("[syscall no %d]\t__sys_linux_madvise\n", num); 
+				break;
+			case 221:				
+				kprintf("[syscall no %d]\t__sys_linux_fcntl64\n", num); break;
+			case 224:
+				kprintf("[syscall no %d]\t__sys_linux_gettid\n", num); break;
+			case 240:
+				kprintf("[syscall no %d]\t__sys_linux_futex\n", num); break;				
+			case 248:
+				kprintf("[syscall no %d]\t__sys_linux_exit_group\n", num); break;
+			case 263:
+				kprintf("[syscall no %d]\t__sys_linux_clock_gettime\n", num); break;
+			case 983045:				
+				kprintf("[syscall no %d]\t__sys_arm_linux_set_tls\n", num); break;
+			default:
+				//kprintf("");
+				kprintf("[syscall no %d]\t\n",num);
+		}
+		*/
 		return 0;
+	}else{
+		return 0;
+		kprintf("[!!! undefined syscall no %d]\n",num);
 	}
 
 	return -1;
@@ -932,10 +1188,14 @@ static uint32_t(*syscalls[]) (uint32_t arg[]) = {
 #define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
 
 void syscall()
-{
+{	
 	uint32_t arg[5];
 	struct trapframe *tf = pls_read(current)->tf;
 	int num = tf->tf_err;	// SYS_xxx
+	unsigned int num_linux_call = 0;
+	if(num == 0){
+		num_linux_call = tf->tf_regs.reg_r[7];
+	}
 	if (num == 0) {
 		if (__sys_linux_entry(tf))
 			goto bad_call;
@@ -943,6 +1203,48 @@ void syscall()
 	}
 	if (num >= 0 && num < NUM_SYSCALLS) {
 		if (syscalls[num] != NULL) {
+			
+			switch(num){
+				case 1:
+					kprintf("[##syscall no=%d sys_exit]\n", num); break;
+				case 2:
+					kprintf("[##syscall no=%d sys_fork]\n", num); break;
+				case 3:
+					kprintf("[##syscall no=%d sys_wait]\n", num); break;
+				case 4:
+					kprintf("[##syscall no=%d sys_execve]\n", num); break;
+				case 19:
+					kprintf("[##syscall no=%d sys_brk]\n", num); break;
+				case 22:
+					kprintf("[##syscall no=%d sys_shmem]\n", num); break;
+				case 100:
+					//kprintf("[##syscall no=%d sys_open]\n", num); 
+					break;
+				case 101:
+					//kprintf("[##syscall no=%d sys_close]\n", num); 
+					break;
+				case 102:
+					//kprintf("[##syscall no=%d sys_read]\n", num);
+					break;
+				case 103:
+					//kprintf("[##syscall no=%d write arg[1]=%s, arg[2]=%d]\n",num,arg[1],arg[2]); 
+					break;
+				case 110:
+					//kprintf("[##syscall no=%d sys_fstat]\n", num); 
+					break;
+				case 120:
+					kprintf("[##syscall no=%d sys_chdir]\n", num); 
+					break;
+				case 121:
+					kprintf("[##syscall no=%d sys_getcwd]\n", num); 
+					break;
+				case 128:
+					//kprintf("[##syscall no=%d sys_getdirentry]\n",num); 
+					break;
+				default:
+					kprintf("----- syscalls no. %d -----\n",num);
+			}	
+			
 			arg[0] = tf->tf_regs.reg_r[0];	// arg0
 			arg[1] = tf->tf_regs.reg_r[1];	// arg1
 			arg[2] = tf->tf_regs.reg_r[2];	// arg2
@@ -953,7 +1255,7 @@ void syscall()
 	}
 bad_call:
 	print_trapframe(tf);
-	kprintf("undefined syscall %d, pid = %d, name = %s.\n",
-		num, pls_read(current)->pid, pls_read(current)->name);
+	kprintf("undefined syscall %d linux_syscall %d, pid = %d, name = %s.\n",
+		num, num_linux_call, pls_read(current)->pid, pls_read(current)->name);
 	do_exit(-E_KILLED);
 }
diff --git a/ucore/src/kern-ucore/arch/mips/include.mk b/ucore/src/kern-ucore/arch/mips/include.mk
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/mips/ucore.ld b/ucore/src/kern-ucore/arch/mips/ucore.ld
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/clock.c b/ucore/src/kern-ucore/arch/nios2/driver/clock.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/clock.h b/ucore/src/kern-ucore/arch/nios2/driver/clock.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/console.c b/ucore/src/kern-ucore/arch/nios2/driver/console.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/console.h b/ucore/src/kern-ucore/arch/nios2/driver/console.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/nios2_irq.c b/ucore/src/kern-ucore/arch/nios2/driver/nios2_irq.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/nios2_irq.h b/ucore/src/kern-ucore/arch/nios2/driver/nios2_irq.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/nios2_timer.c b/ucore/src/kern-ucore/arch/nios2/driver/nios2_timer.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/nios2_timer.h b/ucore/src/kern-ucore/arch/nios2/driver/nios2_timer.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/driver/rf212.c b/ucore/src/kern-ucore/arch/nios2/driver/rf212.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/alt_types.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/alt_types.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/altera_avalon_pio_regs.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/altera_avalon_pio_regs.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/altera_avalon_timer_regs.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/altera_avalon_timer_regs.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/arch.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/arch.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/io.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/io.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/nios2.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/nios2.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/system.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/libs/system.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/trap.h b/ucore/src/kern-ucore/arch/nios2/glue-ucore/trap.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/glue-ucore/trapentry.S b/ucore/src/kern-ucore/arch/nios2/glue-ucore/trapentry.S
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/include.mk b/ucore/src/kern-ucore/arch/nios2/include.mk
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/init/init.S b/ucore/src/kern-ucore/arch/nios2/init/init.S
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/init/main.c b/ucore/src/kern-ucore/arch/nios2/init/main.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/process/proc.c b/ucore/src/kern-ucore/arch/nios2/process/proc.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/process/proc_entry.S b/ucore/src/kern-ucore/arch/nios2/process/proc_entry.S
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/process/switch.S b/ucore/src/kern-ucore/arch/nios2/process/switch.S
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/syscall/syscall.c b/ucore/src/kern-ucore/arch/nios2/syscall/syscall.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/syscall/syscall.h b/ucore/src/kern-ucore/arch/nios2/syscall/syscall.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/ucore.ld.in b/ucore/src/kern-ucore/arch/nios2/ucore.ld.in
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/arch/nios2/ucore.mk b/ucore/src/kern-ucore/arch/nios2/ucore.mk
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/fs/file.c b/ucore/src/kern-ucore/fs/file.c
index 6230efa..b482191 100644
--- a/ucore/src/kern-ucore/fs/file.c
+++ b/ucore/src/kern-ucore/fs/file.c
@@ -277,8 +277,8 @@ int file_write(int fd, void *base, size_t len, size_t * copied_store)
 	filemap_release(file);
 	return ret;
 }
-
-int file_seek(int fd, off_t pos, int whence)
+// ZHKTODO origin int
+off_t file_seek(int fd, off_t pos, int whence)
 {
 	struct stat __stat, *stat = &__stat;
 	int ret;
@@ -306,6 +306,8 @@ int file_seek(int fd, off_t pos, int whence)
 	if (ret == 0) {
 		if ((ret = vop_tryseek(file->node, pos)) == 0) {
 			file->pos = pos;
+			// ZHKTODO
+			ret = pos;
 		}
 	}
 	filemap_release(file);
diff --git a/ucore/src/kern-ucore/fs/file.h b/ucore/src/kern-ucore/fs/file.h
index a043ec7..73d0fc0 100644
--- a/ucore/src/kern-ucore/fs/file.h
+++ b/ucore/src/kern-ucore/fs/file.h
@@ -41,7 +41,7 @@ int file_open(char *path, uint32_t open_flags);
 int file_close(int fd);
 int file_read(int fd, void *base, size_t len, size_t * copied_store);
 int file_write(int fd, void *base, size_t len, size_t * copied_store);
-int file_seek(int fd, off_t pos, int whence);
+off_t file_seek(int fd, off_t pos, int whence);
 int file_fstat(int fd, struct stat *stat);
 int file_fsync(int fd);
 int file_getdirentry(int fd, struct dirent *dirent);
diff --git a/ucore/src/kern-ucore/fs/sysfile.c b/ucore/src/kern-ucore/fs/sysfile.c
index 60cdb54..91f4874 100644
--- a/ucore/src/kern-ucore/fs/sysfile.c
+++ b/ucore/src/kern-ucore/fs/sysfile.c
@@ -191,7 +191,7 @@ int sysfile_writev(int fd, struct iovec __user * iov, int iovcnt)
 		return (count);
 }
 
-int sysfile_seek(int fd, off_t pos, int whence)
+off_t sysfile_seek(int fd, off_t pos, int whence)
 {
 	return file_seek(fd, pos, whence);
 }
diff --git a/ucore/src/kern-ucore/fs/sysfile.h b/ucore/src/kern-ucore/fs/sysfile.h
index c679850..7bea033 100644
--- a/ucore/src/kern-ucore/fs/sysfile.h
+++ b/ucore/src/kern-ucore/fs/sysfile.h
@@ -10,7 +10,7 @@ int sysfile_open(const char *path, uint32_t open_flags);
 int sysfile_close(int fd);
 int sysfile_read(int fd, void *base, size_t len);
 int sysfile_write(int fd, void *base, size_t len);
-int sysfile_seek(int fd, off_t pos, int whence);
+off_t sysfile_seek(int fd, off_t pos, int whence);
 int sysfile_fstat(int fd, struct stat *stat);
 int sysfile_stat(const char *fn, struct stat *stat);
 int sysfile_fsync(int fd);
diff --git a/ucore/src/kern-ucore/mm/vmm.c b/ucore/src/kern-ucore/mm/vmm.c
index 7750656..46b8569 100644
--- a/ucore/src/kern-ucore/mm/vmm.c
+++ b/ucore/src/kern-ucore/mm/vmm.c
@@ -380,14 +380,14 @@ mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
 {
 	uintptr_t start = ROUNDDOWN(addr, PGSIZE), end =
 	    ROUNDUP(addr + len, PGSIZE);
+	int ret = 0;
 	if (!USER_ACCESS(start, end)) {
-		return -E_INVAL;
+		ret = -(E_INVAL);
+		return ret;
 	}
-
 	assert(mm != NULL);
-
-	int ret = -E_INVAL;
-
+	
+	ret = -E_INVAL;
 	struct vma_struct *vma;
 	if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
 		goto out;
diff --git a/ucore/src/kern-ucore/module/drivers/mmc/core/sdio_io.c b/ucore/src/kern-ucore/module/drivers/mmc/core/sdio_io.c
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/module/include/linux/earlysuspend.h b/ucore/src/kern-ucore/module/include/linux/earlysuspend.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/module/include/linux/mmc/sdio_func.h b/ucore/src/kern-ucore/module/include/linux/mmc/sdio_func.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/module/include/linux/wakelock.h b/ucore/src/kern-ucore/module/include/linux/wakelock.h
old mode 100755
new mode 100644
diff --git a/ucore/src/kern-ucore/process/proc.c b/ucore/src/kern-ucore/process/proc.c
index cfa2f46..55b556e 100644
--- a/ucore/src/kern-ucore/process/proc.c
+++ b/ucore/src/kern-ucore/process/proc.c
@@ -745,7 +745,7 @@ int do_exit_thread(int error_code)
 static int load_icode_read(int fd, void *buf, size_t len, off_t offset)
 {
 	int ret;
-	if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
+	if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) < 0) {
 		return ret;
 	}
 	if ((ret = sysfile_read(fd, buf, len)) != len) {
@@ -787,7 +787,7 @@ map_ph(int fd, struct proghdr *ph, struct mm_struct *mm, uint32_t * pbias,
 	}
 
 	if ((ret =
-	     mm_map(mm, ph->p_va + bias, ph->p_memsz, vm_flags, NULL)) != 0) {
+	    mm_map(mm, ph->p_va + bias, ph->p_memsz, vm_flags, NULL)) != 0) {
 		goto bad_cleanup_mmap;
 	}
 
@@ -930,8 +930,7 @@ static int load_icode(int fd, int argc, char **kargv, int envc, char **kenvp)
 		}
 
 		if ((ret = map_ph(fd, ph, mm, &bias, 0)) != 0) {
-			kprintf("load address: 0x%08x size: %d\n", ph->p_va,
-				ph->p_memsz);
+			kprintf("load address: 0x%08x size: %d\n", ph->p_va, ph->p_memsz);
 			goto bad_cleanup_mmap;
 		}
 
@@ -1033,6 +1032,7 @@ static int load_icode(int fd, int argc, char **kargv, int envc, char **kenvp)
 
 		char *interp_path = (char *)kmalloc(ph->p_filesz);
 		load_icode_read(fd, interp_path, ph->p_filesz, ph->p_offset);
+kprintf("interp_path:%s\n", interp_path);
 
 		int interp_fd = sysfile_open(interp_path, O_RDONLY);
 		assert(interp_fd >= 0);
@@ -1078,9 +1078,11 @@ static int load_icode(int fd, int argc, char **kargv, int envc, char **kenvp)
 			if (interp_ph->p_type != ELF_PT_LOAD) {
 				continue;
 			}
-			assert((ret =
-				map_ph(interp_fd, interp_ph, mm, &bias,
-				       1)) == 0);
+//kprintf("\n--------------------------\n");
+	ret =  map_ph(interp_fd, interp_ph, mm, &bias, 1);	
+//kprintf("ret:%d\n", ret);
+	assert(ret == 0);
+kprintf("map_ph:%08x\n", bias);
 		}
 
 		real_entry = interp_elf->e_entry + bias;
@@ -1140,10 +1142,12 @@ copy_kargv(struct mm_struct *mm, char **kargv, const char **argv, int max_argc,
 	   int *argc_store)
 {
 	int i, ret = -E_INVAL;
-	if (!argv) {
+	
+	if (argv == NULL || argv[0] == NULL) {
 		*argc_store = 0;
 		return 0;
 	}
+	
 	char *argv_k;
 	for (i = 0; i < max_argc; i++) {
 		if (!copy_from_user(mm, &argv_k, argv + i, sizeof(char *), 0))
@@ -1203,18 +1207,31 @@ int do_execve(const char *filename, const char **argv, const char **envp)
 	}
 #endif
 	snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
-
 	int argc = 0, envc = 0;
-	if ((ret = copy_kargv(mm, kargv, argv, EXEC_MAX_ARG_NUM, &argc)) != 0) {
-		unlock_mm(mm);
-		return ret;
+	if(argv != NULL && argv[0] != NULL){
+		if ((ret = copy_kargv(mm, kargv, argv, EXEC_MAX_ARG_NUM, &argc)) != 0) {
+			unlock_mm(mm);
+			return ret;
+		}
+	} else{			
+		argc = 1;
+		char *buffer;
+		if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
+			kfree(buffer);
+			return -1;
+		}
+		if (!copy_string(mm, buffer, filename, EXEC_MAX_ARG_LEN + 1)) {
+			kfree(buffer);
+			return -1;
+		}
+		kargv[0] = buffer;		
 	}
 	if ((ret = copy_kargv(mm, kenvp, envp, EXEC_MAX_ENV_NUM, &envc)) != 0) {
 		unlock_mm(mm);
 		put_kargv(argc, kargv);
 		return ret;
 	}
-#if 0
+#if 1
 	int i;
 	kprintf("## fn %s\n", filename);
 	kprintf("## argc %d\n", argc);
@@ -1947,7 +1964,16 @@ static int user_main(void *arg)
 	KERNEL_EXECVE2(UNITTEST);
 #endif
 #else
-	__KERNEL_EXECVE("/bin/sh", "/bin/sh");
+	/*
+	__KERNEL_EXECVE("/system/bin/dalvikvm", 
+					"/system/bin/dalvikvm", 
+					"-Xbootclasspath:/framework/core.jar:/framework/ext.jar:/framework/framework.jar:/framework/android.policy.jar:/framework/services.jar",
+					"-cp", "foo.jar", "Foo");
+	*/
+	
+	__KERNEL_EXECVE("/bin/sh", 
+					"/bin/sh");
+	
 #endif
 	kprintf("user_main execve failed, no /bin/sh?.\n");
 }
diff --git a/ucore/src/kern-ucore/process/signal.c b/ucore/src/kern-ucore/process/signal.c
index 7eea4da..d965ab4 100644
--- a/ucore/src/kern-ucore/process/signal.c
+++ b/ucore/src/kern-ucore/process/signal.c
@@ -252,6 +252,7 @@ int do_sigpending(sigset_t * set)
 // do syscall sigprocmask
 int do_sigprocmask(int how, const sigset_t * set, sigset_t * old)
 {
+	kprintf("****************-----------------******************\n");
 	assert(get_si(current)->signal);
 	sigset_t new;
 	int ret = -E_INVAL;
@@ -288,6 +289,7 @@ int do_sigprocmask(int how, const sigset_t * set, sigset_t * old)
 		ret = -E_INVAL;
 	}
 	sig_recalc_pending(current);
+	kprintf("****************---------333------******************\n");
 out:
 	return ret;
 }
diff --git a/ucore/src/libs-user-ucore/arch/nios2/arch.h b/ucore/src/libs-user-ucore/arch/nios2/arch.h
old mode 100755
new mode 100644
diff --git a/ucore/src/libs-user-ucore/arch/or32/or32/spr_defs.h b/ucore/src/libs-user-ucore/arch/or32/or32/spr_defs.h
old mode 100755
new mode 100644
diff --git a/ucore/src/libs-user-ucore/syscall.c b/ucore/src/libs-user-ucore/syscall.c
index bc75925..276d333 100644
--- a/ucore/src/libs-user-ucore/syscall.c
+++ b/ucore/src/libs-user-ucore/syscall.c
@@ -28,7 +28,16 @@ int sys_wait(int pid, int *store)
 
 int sys_exec(const char *filename, const char **argv, const char **envp)
 {
-	return syscall(SYS_exec, filename, argv, envp);
+	cprintf("----\n");
+	cprintf("****\n");
+	cprintf("++++\n");
+	if(argv == NULL){
+		//printf("----------------------------------");
+		argv[0] = (const char *)0;
+		return syscall(SYS_exec, filename, argv, envp);		
+	} ekse{
+		return syscall(SYS_exec, filename, argv, envp);
+	}
 }
 
 int sys_yield(void)
diff --git a/ucore/src/libs-user-ucore/ulib.c b/ucore/src/libs-user-ucore/ulib.c
index 086470f..530aac5 100644
--- a/ucore/src/libs-user-ucore/ulib.c
+++ b/ucore/src/libs-user-ucore/ulib.c
@@ -181,6 +181,7 @@ int __exec(const char *name, const char **argv, const char **envp)
 	while (argv[argc] != NULL) {
 		argc++;
 	}
+	//cprintf("))))\n");
 	return sys_exec(argv[0], argv, envp);
 }
 
diff --git a/ucore/src/user-ucore/_initial.big/hello.txt b/ucore/src/user-ucore/_initial.big/hello.txt
deleted file mode 100644
index 83cf24c..0000000
--- a/ucore/src/user-ucore/_initial.big/hello.txt
+++ /dev/null
@@ -1 +0,0 @@
-WORLD
diff --git a/ucore/src/user-ucore/_initial.big/testlibc b/ucore/src/user-ucore/_initial.big/testlibc
deleted file mode 100755
index 4b5713b..0000000
Binary files a/ucore/src/user-ucore/_initial.big/testlibc and /dev/null differ
diff --git a/ucore/src/user-ucore/_initial.big/tt b/ucore/src/user-ucore/_initial.big/tt
deleted file mode 100755
index 85ae6d3..0000000
Binary files a/ucore/src/user-ucore/_initial.big/tt and /dev/null differ
diff --git a/ucore/src/user-ucore/ls.c b/ucore/src/user-ucore/ls.c
index aa4ccba..d472708 100644
--- a/ucore/src/user-ucore/ls.c
+++ b/ucore/src/user-ucore/ls.c
@@ -113,7 +113,6 @@ int ls(const char *path)
 		type = 5;
 		break;
 	}
-
 	printf(" @ is %s", filetype[type]);
 	printf(" %d(hlinks)", stat->st_nlinks);
 	printf(" %d(blocks)", stat->st_blocks);
diff --git a/ucore/src/user-ucore/sh.c b/ucore/src/user-ucore/sh.c
index 8958db8..b513371 100644
--- a/ucore/src/user-ucore/sh.c
+++ b/ucore/src/user-ucore/sh.c
@@ -118,6 +118,7 @@ int runcmd(char *cmd)
 	const char *argv[EXEC_MAX_ARG_NUM + 1];
 	char *t;
 	int argc, token, ret, p[2];
+	//printf("cmd=%s\n",cmd);
 again:
 	argc = 0;
 	while (1) {
diff --git a/ucore/thumips_insn.txt b/ucore/thumips_insn.txt
old mode 100644
new mode 100755
